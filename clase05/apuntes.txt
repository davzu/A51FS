npm i -g firebase-tools
3 comandos
>firebase login
>firebase init
>firebase deploy

========== angular
página angular cli => cli.angular.io

Instalar angular cli
>npm i -g @angular/cli

Crear proyecto en angular / ubicarse en un directorio donde se trabajará el proyecto
>ng new appInicio
Se creará el proyecto appInicio y descargará los archivos necesarios
El archivo de configuración de angularCli es .angular-cli.json allí se define el puerto entre otros

Angular inicia de la siguiente forma:

src/main.ts => llama a:
	app/app.module.ts => llama a:
		app.component.ts

Estas configuraciones se puede modificar

Para compilar el proyecto angularCli debemos ubicarnos en la raíz y ejecutar el comando
>ng serve
Para visualizar la página index.html ejecutar desde un navegador
localhost:4200

========== componentes en angular
Al menos se deben crear 3 archivos
.ts => La clase donde donde se especificarán la configuración del componentes
.html => Lo que mostrará el componente al ser llamado
.css => Los estilos que usará el componente

========== generador de componentes del angularCli
Los componentes se crean con el siguiente comando
Manera larga
>ng generate component listado
Manera corta
>ng g c listado

Además esos archivos se crean en una carpeta y lo asocian en app.module.ts
Si se quiere crear un componente dentro de un directorio en espcífico
>ng g c listado/formulario
Para no incluir pruebas unitarias
>ng g c listado/formulario --spec false

// >npm install ... --save => save indica que cuando se pase a producción se incluirá
// >npm install ... --save-dev => devsave indica que cuando se pase a producción no se incluirá

========== interpolación angular {{}} // la interpolación es dentro de una etiqueta
<h1>{{titulo}}</h1>
titulo es un atributo de la clase del componente


// en el index.html => base="/" modificar para indicar donde está el proyecto
// extension de chrome angular augury / inspect=>pestaña augury

========== crear clase con ngcli
>ng g class <nombreClase>

========== aplicar estilos con angular
[style] => se aplica el estilo directamente
[style]="{background: 'red'}"

[ngStyle] => se puede llamar a métodos para que retornen el estilo
[ngStyle]="{background: obtenerColorFondo()}"

[ngClass] => hace referencia a la clase de la hoja de estilos css
ngClass]="{activo: elemento.estado.toLowerCase() == 'activo', noactivo: elemento.estado.toLowerCase() != 'activo'}"

//shadow-root

========== directivas
Las directivas siempre se aplican sobre un elemento
Debo indicar a angular que la directiva existe, ir al app.module.ts e importarlo

Crear directiva por comando
>ng g d directivaAvanzada


// Si queremos que sea dinámica (se ejecute algún script, método), encerrarlo con corchetes 
//<componente-abc [propiedad]="" >

// Todos los decoradores empiezan con @  y amplían la propiedad de un atributo

// @HostBinding => monitorear cambios en las propiedades

========== servicios
Los servicios en el app.module se importa en Providers
Crear servicio por comando
>ng g s peliculas

========== rutas (Router)
en app.module
import { RouterModule, Routes} from '@angular/router';

Routes => un array de json para definir las rutas
const rutas: Routes = [
	{ path: "", component: ListadoComponent },
	{ path: "nuevo", component: NuevoComponent },
	{ path: "detalle", component: DetalleComponent },
	// { path: "**", component: ListadoComponent } // ruta por defecto
	{ path: "**", component: redirecTo: "/" } // redirecciona
];

en imports añadirlo => RouterModule
RouterModule.forRoot(rutas) => está cargando todas las rutas definidas en el array rutas

// La idea de las cabeceras es que se trabaje como SPA
routerLink => Nos sirve para cargar la ruta sin cargar toda la página

// incluir bootstrap => npm install bootstrap@4.0.0-beta.2 --save
.angular-cli.json / style => "../node_modules/bootstrap/dist/css/bootstrap.min.css"

ng g m tipos --routing true
ng g c tipos/listado --spec false

========== Observables
observador cada 1 segundo
let numeros = Observable.interval(1000);
numeros.subscribe(
			num => {
				console.log(num);
			}
		);

// reactiveXS => no es propio de angular
// es la competencia de las promesas

// playgroun nativescript
// macincloud

// forRoot solo se utiliza 1 vez, crea rutas. Considerado en el modulo de ruta principal
// forChild no crea rutas, solo las añade
// loadChildren carga lo que se necesite

RouterModule.forRoot(rutas, {preloadingStrategy: PreloadAllModules})
// hace una carga de todos los módulos así estén separados

// Los servicios se recomiendan no tenerlos por separados

// Los observables responde al paradigma de programación reactiva, no es exclusivo de angular
En los observables, cuando se cumple se usa next, caso contrario error, complete es en ambos casos
Los observables a diferencia de las promesas se pueden ejecutar muchas veces.
Los observables también se pueden convertir en promesas.

Con error y complete se culmina el observable

observador.subscribe(
			(data:string) => console.log(data), // 1er argumento para next, el error no será capturado
			(data:string) => console.log(data), // 2do argumento para error, el error es capturado
			() => console.log("Se completo") // 3er argumento para complete
);

*****

const observador: Observable<number> = Observable.interval(1000);
// importar manualmente => import 'rxjs/Rx'


====== trabajando con api rest clase10
>sudo npm i -g sails
dentro de servidor ejecutar
>npm install

levantar servidor (ubicarse en servidor)
>sails lift
por debajo ejecuta >node app


<form class="form-signin" (ngSubmit)="registrar()" #formulario>
    <button class="btn btn-lg btn-primary btn-block" type="submit" [disable]="!formulario.valid">Registrar</button>

#formulario => variable de plantilla
